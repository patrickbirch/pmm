// Code generated by go-swagger; DO NOT EDIT.

package postgre_sql

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"
)

// AddMixin0Reader is a Reader for the AddMixin0 structure.
type AddMixin0Reader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AddMixin0Reader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewAddMixin0OK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		result := NewAddMixin0Default(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewAddMixin0OK creates a AddMixin0OK with default headers values
func NewAddMixin0OK() *AddMixin0OK {
	return &AddMixin0OK{}
}

/*AddMixin0OK handles this case with default header values.

A successful response.
*/
type AddMixin0OK struct {
	Payload *AddMixin0OKBody
}

func (o *AddMixin0OK) Error() string {
	return fmt.Sprintf("[POST /v1/management/PostgreSQL/Add][%d] addMixin0Ok  %+v", 200, o.Payload)
}

func (o *AddMixin0OK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(AddMixin0OKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddMixin0Default creates a AddMixin0Default with default headers values
func NewAddMixin0Default(code int) *AddMixin0Default {
	return &AddMixin0Default{
		_statusCode: code,
	}
}

/*AddMixin0Default handles this case with default header values.

An error response.
*/
type AddMixin0Default struct {
	_statusCode int

	Payload *AddMixin0DefaultBody
}

// Code gets the status code for the add mixin0 default response
func (o *AddMixin0Default) Code() int {
	return o._statusCode
}

func (o *AddMixin0Default) Error() string {
	return fmt.Sprintf("[POST /v1/management/PostgreSQL/Add][%d] AddMixin0 default  %+v", o._statusCode, o.Payload)
}

func (o *AddMixin0Default) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(AddMixin0DefaultBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*AddMixin0Body add mixin0 body
swagger:model AddMixin0Body
*/
type AddMixin0Body struct {

	// Node and Service access address (DNS name or IP). Required.
	Address string `json:"address,omitempty"`

	// Node identifier on which a service is been running. Required.
	NodeID string `json:"node_id,omitempty"`

	// PostgreSQL password for scraping metrics.
	Password string `json:"password,omitempty"`

	// The "pmm-agent" identifier which should run agents. Required.
	PMMAgentID string `json:"pmm_agent_id,omitempty"`

	// Service Access port. Required.
	Port int64 `json:"port,omitempty"`

	// If true, adds postgres_exporter for provided service.
	PostgresExporter bool `json:"postgres_exporter,omitempty"`

	// FIXME remove
	QANPassword string `json:"qan_password,omitempty"`

	// FIXME remove
	QANUsername string `json:"qan_username,omitempty"`

	// Unique across all Services user-defined name. Required.
	ServiceName string `json:"service_name,omitempty"`

	// PostgreSQL username for scraping metrics.
	Username string `json:"username,omitempty"`
}

// Validate validates this add mixin0 body
func (o *AddMixin0Body) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *AddMixin0Body) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AddMixin0Body) UnmarshalBinary(b []byte) error {
	var res AddMixin0Body
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*AddMixin0DefaultBody ErrorResponse is a message returned on HTTP error.
swagger:model AddMixin0DefaultBody
*/
type AddMixin0DefaultBody struct {

	// code
	Code int32 `json:"code,omitempty"`

	// error
	Error string `json:"error,omitempty"`

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this add mixin0 default body
func (o *AddMixin0DefaultBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *AddMixin0DefaultBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AddMixin0DefaultBody) UnmarshalBinary(b []byte) error {
	var res AddMixin0DefaultBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*AddMixin0OKBody add mixin0 OK body
swagger:model AddMixin0OKBody
*/
type AddMixin0OKBody struct {

	// postgres exporter
	PostgresExporter *AddMixin0OKBodyPostgresExporter `json:"postgres_exporter,omitempty"`

	// service
	Service *AddMixin0OKBodyService `json:"service,omitempty"`
}

// Validate validates this add mixin0 OK body
func (o *AddMixin0OKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validatePostgresExporter(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateService(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *AddMixin0OKBody) validatePostgresExporter(formats strfmt.Registry) error {

	if swag.IsZero(o.PostgresExporter) { // not required
		return nil
	}

	if o.PostgresExporter != nil {
		if err := o.PostgresExporter.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("addMixin0Ok" + "." + "postgres_exporter")
			}
			return err
		}
	}

	return nil
}

func (o *AddMixin0OKBody) validateService(formats strfmt.Registry) error {

	if swag.IsZero(o.Service) { // not required
		return nil
	}

	if o.Service != nil {
		if err := o.Service.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("addMixin0Ok" + "." + "service")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *AddMixin0OKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AddMixin0OKBody) UnmarshalBinary(b []byte) error {
	var res AddMixin0OKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*AddMixin0OKBodyPostgresExporter PostgresExporter runs on Generic or Container Node and exposes PostgreSQL Service metrics.
swagger:model AddMixin0OKBodyPostgresExporter
*/
type AddMixin0OKBodyPostgresExporter struct {

	// Unique randomly generated instance identifier.
	AgentID string `json:"agent_id,omitempty"`

	// Custom user-assigned labels.
	CustomLabels map[string]string `json:"custom_labels,omitempty"`

	// Desired Agent status: enabled (false) or disabled (true).
	Disabled bool `json:"disabled,omitempty"`

	// Listen port for scraping metrics.
	ListenPort int64 `json:"listen_port,omitempty"`

	// PostgreSQL password for scraping metrics.
	Password string `json:"password,omitempty"`

	// The pmm-agent identifier which runs this instance.
	PMMAgentID string `json:"pmm_agent_id,omitempty"`

	// Service identifier.
	ServiceID string `json:"service_id,omitempty"`

	// AgentStatus represents actual Agent status.
	// Enum: [AGENT_STATUS_INVALID STARTING RUNNING WAITING STOPPING DONE]
	Status *string `json:"status,omitempty"`

	// PostgreSQL username for scraping metrics.
	Username string `json:"username,omitempty"`
}

// Validate validates this add mixin0 OK body postgres exporter
func (o *AddMixin0OKBodyPostgresExporter) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var addMixin0OkBodyPostgresExporterTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["AGENT_STATUS_INVALID","STARTING","RUNNING","WAITING","STOPPING","DONE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		addMixin0OkBodyPostgresExporterTypeStatusPropEnum = append(addMixin0OkBodyPostgresExporterTypeStatusPropEnum, v)
	}
}

const (

	// AddMixin0OKBodyPostgresExporterStatusAGENTSTATUSINVALID captures enum value "AGENT_STATUS_INVALID"
	AddMixin0OKBodyPostgresExporterStatusAGENTSTATUSINVALID string = "AGENT_STATUS_INVALID"

	// AddMixin0OKBodyPostgresExporterStatusSTARTING captures enum value "STARTING"
	AddMixin0OKBodyPostgresExporterStatusSTARTING string = "STARTING"

	// AddMixin0OKBodyPostgresExporterStatusRUNNING captures enum value "RUNNING"
	AddMixin0OKBodyPostgresExporterStatusRUNNING string = "RUNNING"

	// AddMixin0OKBodyPostgresExporterStatusWAITING captures enum value "WAITING"
	AddMixin0OKBodyPostgresExporterStatusWAITING string = "WAITING"

	// AddMixin0OKBodyPostgresExporterStatusSTOPPING captures enum value "STOPPING"
	AddMixin0OKBodyPostgresExporterStatusSTOPPING string = "STOPPING"

	// AddMixin0OKBodyPostgresExporterStatusDONE captures enum value "DONE"
	AddMixin0OKBodyPostgresExporterStatusDONE string = "DONE"
)

// prop value enum
func (o *AddMixin0OKBodyPostgresExporter) validateStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, addMixin0OkBodyPostgresExporterTypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (o *AddMixin0OKBodyPostgresExporter) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(o.Status) { // not required
		return nil
	}

	// value enum
	if err := o.validateStatusEnum("addMixin0Ok"+"."+"postgres_exporter"+"."+"status", "body", *o.Status); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *AddMixin0OKBodyPostgresExporter) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AddMixin0OKBodyPostgresExporter) UnmarshalBinary(b []byte) error {
	var res AddMixin0OKBodyPostgresExporter
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*AddMixin0OKBodyService PostgreSQLService represents a generic PostgreSQL instance.
swagger:model AddMixin0OKBodyService
*/
type AddMixin0OKBodyService struct {

	// Access address (DNS name or IP).
	Address string `json:"address,omitempty"`

	// Custom user-assigned labels.
	CustomLabels map[string]string `json:"custom_labels,omitempty"`

	// Node identifier where this instance runs.
	NodeID string `json:"node_id,omitempty"`

	// Access port.
	Port int64 `json:"port,omitempty"`

	// Unique randomly generated instance identifier.
	ServiceID string `json:"service_id,omitempty"`

	// Unique across all Services user-defined name.
	ServiceName string `json:"service_name,omitempty"`
}

// Validate validates this add mixin0 OK body service
func (o *AddMixin0OKBodyService) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *AddMixin0OKBodyService) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AddMixin0OKBodyService) UnmarshalBinary(b []byte) error {
	var res AddMixin0OKBodyService
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
