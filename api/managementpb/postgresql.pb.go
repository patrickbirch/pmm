// Code generated by protoc-gen-go. DO NOT EDIT.
// source: managementpb/postgresql.proto

package managementpb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	_ "github.com/mwitkow/go-proto-validators"
	inventorypb "github.com/percona/pmm/api/inventorypb"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type AddPostgreSQLRequest struct {
	// Node identifier on which a service is been running. Required.
	NodeId string `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	// Unique across all Services user-defined name. Required.
	ServiceName string `protobuf:"bytes,2,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	// Node and Service access address (DNS name or IP). Required.
	Address string `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
	// Service Access port. Required.
	Port uint32 `protobuf:"varint,4,opt,name=port,proto3" json:"port,omitempty"`
	// The "pmm-agent" identifier which should run agents. Required.
	PmmAgentId string `protobuf:"bytes,5,opt,name=pmm_agent_id,json=pmmAgentId,proto3" json:"pmm_agent_id,omitempty"`
	// Environment name.
	Environment string `protobuf:"bytes,6,opt,name=environment,proto3" json:"environment,omitempty"`
	// PostgreSQL username for scraping metrics.
	Username string `protobuf:"bytes,7,opt,name=username,proto3" json:"username,omitempty"`
	// PostgreSQL password for scraping metrics.
	Password string `protobuf:"bytes,8,opt,name=password,proto3" json:"password,omitempty"`
	// If true, adds postgres_exporter for provided service.
	PostgresExporter     bool     `protobuf:"varint,10,opt,name=postgres_exporter,json=postgresExporter,proto3" json:"postgres_exporter,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddPostgreSQLRequest) Reset()         { *m = AddPostgreSQLRequest{} }
func (m *AddPostgreSQLRequest) String() string { return proto.CompactTextString(m) }
func (*AddPostgreSQLRequest) ProtoMessage()    {}
func (*AddPostgreSQLRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6e72a2ebc60b1270, []int{0}
}

func (m *AddPostgreSQLRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddPostgreSQLRequest.Unmarshal(m, b)
}
func (m *AddPostgreSQLRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddPostgreSQLRequest.Marshal(b, m, deterministic)
}
func (m *AddPostgreSQLRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddPostgreSQLRequest.Merge(m, src)
}
func (m *AddPostgreSQLRequest) XXX_Size() int {
	return xxx_messageInfo_AddPostgreSQLRequest.Size(m)
}
func (m *AddPostgreSQLRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddPostgreSQLRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddPostgreSQLRequest proto.InternalMessageInfo

func (m *AddPostgreSQLRequest) GetNodeId() string {
	if m != nil {
		return m.NodeId
	}
	return ""
}

func (m *AddPostgreSQLRequest) GetServiceName() string {
	if m != nil {
		return m.ServiceName
	}
	return ""
}

func (m *AddPostgreSQLRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *AddPostgreSQLRequest) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *AddPostgreSQLRequest) GetPmmAgentId() string {
	if m != nil {
		return m.PmmAgentId
	}
	return ""
}

func (m *AddPostgreSQLRequest) GetEnvironment() string {
	if m != nil {
		return m.Environment
	}
	return ""
}

func (m *AddPostgreSQLRequest) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *AddPostgreSQLRequest) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *AddPostgreSQLRequest) GetPostgresExporter() bool {
	if m != nil {
		return m.PostgresExporter
	}
	return false
}

type AddPostgreSQLResponse struct {
	Service              *inventorypb.PostgreSQLService `protobuf:"bytes,1,opt,name=service,proto3" json:"service,omitempty"`
	PostgresExporter     *inventorypb.PostgresExporter  `protobuf:"bytes,2,opt,name=postgres_exporter,json=postgresExporter,proto3" json:"postgres_exporter,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                       `json:"-"`
	XXX_unrecognized     []byte                         `json:"-"`
	XXX_sizecache        int32                          `json:"-"`
}

func (m *AddPostgreSQLResponse) Reset()         { *m = AddPostgreSQLResponse{} }
func (m *AddPostgreSQLResponse) String() string { return proto.CompactTextString(m) }
func (*AddPostgreSQLResponse) ProtoMessage()    {}
func (*AddPostgreSQLResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6e72a2ebc60b1270, []int{1}
}

func (m *AddPostgreSQLResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddPostgreSQLResponse.Unmarshal(m, b)
}
func (m *AddPostgreSQLResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddPostgreSQLResponse.Marshal(b, m, deterministic)
}
func (m *AddPostgreSQLResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddPostgreSQLResponse.Merge(m, src)
}
func (m *AddPostgreSQLResponse) XXX_Size() int {
	return xxx_messageInfo_AddPostgreSQLResponse.Size(m)
}
func (m *AddPostgreSQLResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AddPostgreSQLResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AddPostgreSQLResponse proto.InternalMessageInfo

func (m *AddPostgreSQLResponse) GetService() *inventorypb.PostgreSQLService {
	if m != nil {
		return m.Service
	}
	return nil
}

func (m *AddPostgreSQLResponse) GetPostgresExporter() *inventorypb.PostgresExporter {
	if m != nil {
		return m.PostgresExporter
	}
	return nil
}

func init() {
	proto.RegisterType((*AddPostgreSQLRequest)(nil), "management.AddPostgreSQLRequest")
	proto.RegisterType((*AddPostgreSQLResponse)(nil), "management.AddPostgreSQLResponse")
}

func init() { proto.RegisterFile("managementpb/postgresql.proto", fileDescriptor_6e72a2ebc60b1270) }

var fileDescriptor_6e72a2ebc60b1270 = []byte{
	// 529 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x93, 0x4f, 0x6f, 0x13, 0x3d,
	0x10, 0xc6, 0xdf, 0xcd, 0x5b, 0x92, 0x32, 0x4d, 0xa5, 0x62, 0x81, 0xb4, 0x5a, 0x5a, 0x75, 0x09,
	0x07, 0x52, 0x4a, 0xd6, 0xa2, 0x48, 0x3d, 0x70, 0xdb, 0x4a, 0x95, 0xa8, 0x54, 0x55, 0xb0, 0xbd,
	0x20, 0x2e, 0x91, 0x13, 0x4f, 0x17, 0x8b, 0xac, 0xed, 0xda, 0x4e, 0x02, 0x17, 0x0e, 0x9c, 0x39,
	0xc1, 0x89, 0x8f, 0x85, 0xf8, 0x00, 0x48, 0x88, 0x0f, 0x82, 0xf6, 0x5f, 0x36, 0x21, 0x15, 0xa7,
	0xc4, 0xf3, 0x7b, 0xf4, 0xcc, 0xe3, 0xf1, 0x2c, 0xec, 0x65, 0x4c, 0xb2, 0x14, 0x33, 0x94, 0x4e,
	0x8f, 0xa8, 0x56, 0xd6, 0xa5, 0x06, 0xed, 0xf5, 0x24, 0xd2, 0x46, 0x39, 0x45, 0xa0, 0xc1, 0xc1,
	0x71, 0x2a, 0xdc, 0xdb, 0xe9, 0x28, 0x1a, 0xab, 0x8c, 0x66, 0x73, 0xe1, 0xde, 0xa9, 0x39, 0x4d,
	0xd5, 0xa0, 0x10, 0x0e, 0x66, 0x6c, 0x22, 0x38, 0x73, 0xca, 0x58, 0xba, 0xf8, 0x5b, 0x7a, 0x04,
	0xbb, 0xa9, 0x52, 0xe9, 0x04, 0x29, 0xd3, 0x82, 0x32, 0x29, 0x95, 0x63, 0x4e, 0x28, 0x69, 0x2b,
	0xea, 0x0b, 0x39, 0x43, 0xe9, 0x94, 0xf9, 0xa0, 0x47, 0x94, 0xa5, 0x28, 0x5d, 0x4d, 0x82, 0x65,
	0x62, 0xd1, 0xcc, 0xc4, 0x18, 0x6b, 0xf6, 0xa4, 0xf8, 0x19, 0x0f, 0x52, 0x94, 0x03, 0x3b, 0x67,
	0x69, 0x8a, 0x86, 0x2a, 0x5d, 0xf8, 0xae, 0xf7, 0xe8, 0x7d, 0x6f, 0xc1, 0xdd, 0x98, 0xf3, 0x97,
	0xe5, 0xed, 0x2e, 0x5f, 0x9d, 0x27, 0x78, 0x3d, 0x45, 0xeb, 0xc8, 0x3e, 0x74, 0xa4, 0xe2, 0x38,
	0x14, 0xdc, 0xf7, 0x42, 0xaf, 0x7f, 0xfb, 0xa4, 0xfd, 0xeb, 0xe7, 0x7e, 0xeb, 0xb5, 0x97, 0xb4,
	0xf3, 0xf2, 0x19, 0x27, 0x07, 0xd0, 0xad, 0x3a, 0x0f, 0x25, 0xcb, 0xd0, 0x6f, 0xad, 0xa8, 0xb6,
	0x2a, 0x76, 0xc1, 0x32, 0x24, 0x21, 0x74, 0x18, 0xe7, 0x06, 0xad, 0xf5, 0xff, 0x5f, 0x51, 0xd5,
	0x65, 0x12, 0xc0, 0x86, 0x56, 0xc6, 0xf9, 0x1b, 0xa1, 0xd7, 0xdf, 0x2e, 0xf1, 0xce, 0x7f, 0x49,
	0x51, 0x23, 0x7d, 0xe8, 0xea, 0x2c, 0x1b, 0x16, 0x03, 0xc8, 0xe3, 0xdc, 0x5a, 0xb1, 0x00, 0x9d,
	0x65, 0x71, 0x8e, 0xce, 0x38, 0x09, 0x61, 0x0b, 0xe5, 0x4c, 0x18, 0x25, 0xf3, 0x57, 0xf1, 0xdb,
	0xb9, 0x30, 0x59, 0x2e, 0x91, 0x00, 0x36, 0xa7, 0x16, 0x4d, 0x11, 0xb8, 0x53, 0xe0, 0xc5, 0x39,
	0x67, 0x9a, 0x59, 0x3b, 0x57, 0x86, 0xfb, 0x9b, 0x25, 0xab, 0xcf, 0xe4, 0x10, 0xee, 0xd4, 0x0b,
	0x30, 0xc4, 0xf7, 0x79, 0x2c, 0x34, 0x3e, 0x84, 0x5e, 0x7f, 0x33, 0xd9, 0xa9, 0xc1, 0x69, 0x55,
	0xef, 0x7d, 0xf3, 0xe0, 0xde, 0x5f, 0x33, 0xb5, 0x5a, 0x49, 0x8b, 0xe4, 0x18, 0x3a, 0xd5, 0x5c,
	0x8a, 0xa1, 0x6e, 0x1d, 0xed, 0x46, 0x8b, 0x97, 0x8c, 0x1a, 0xfd, 0x65, 0xa9, 0x49, 0x6a, 0x31,
	0x79, 0x71, 0x53, 0xfb, 0x56, 0xe1, 0x70, 0x7f, 0xdd, 0x61, 0x91, 0x64, 0x3d, 0xdb, 0xd1, 0x67,
	0x0f, 0xa0, 0x69, 0x44, 0x3e, 0xc2, 0xf6, 0x4a, 0x52, 0x12, 0x46, 0xcd, 0x5a, 0x47, 0x37, 0x2d,
	0x46, 0xf0, 0xe0, 0x1f, 0x8a, 0xf2, 0x9a, 0xbd, 0xfe, 0xa7, 0x1f, 0xbf, 0xbf, 0xb6, 0x7a, 0xbd,
	0x3d, 0x3a, 0x7b, 0x4a, 0x1b, 0x35, 0x6d, 0xa4, 0x34, 0xe6, 0xfc, 0xb9, 0xf7, 0xf8, 0x64, 0xf8,
	0x25, 0xbe, 0x48, 0xce, 0xa1, 0xc3, 0xf1, 0x8a, 0x4d, 0x27, 0x8e, 0xc4, 0x40, 0x62, 0x19, 0xa2,
	0x31, 0xca, 0x84, 0xa6, 0xb2, 0x8b, 0xc8, 0x21, 0x1c, 0x04, 0x8f, 0x1e, 0x52, 0x8e, 0x57, 0x42,
	0x8a, 0x72, 0x93, 0x97, 0xbf, 0xcd, 0xd3, 0x5c, 0x5e, 0x37, 0x7f, 0xd3, 0x5d, 0x46, 0xa3, 0x76,
	0xb1, 0xe6, 0xcf, 0xfe, 0x04, 0x00, 0x00, 0xff, 0xff, 0xa0, 0xb7, 0x67, 0x9a, 0xcd, 0x03, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PostgreSQLClient is the client API for PostgreSQL service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PostgreSQLClient interface {
	// AddPostgreSQL adds PostgreSQL Service and starts postgres exporter.
	// It automatically adds a service to inventory, which is running on provided "node_id",
	// then adds "postgres_exporter" with provided "pmm_agent_id" and other parameters.
	AddPostgreSQL(ctx context.Context, in *AddPostgreSQLRequest, opts ...grpc.CallOption) (*AddPostgreSQLResponse, error)
}

type postgreSQLClient struct {
	cc *grpc.ClientConn
}

func NewPostgreSQLClient(cc *grpc.ClientConn) PostgreSQLClient {
	return &postgreSQLClient{cc}
}

func (c *postgreSQLClient) AddPostgreSQL(ctx context.Context, in *AddPostgreSQLRequest, opts ...grpc.CallOption) (*AddPostgreSQLResponse, error) {
	out := new(AddPostgreSQLResponse)
	err := c.cc.Invoke(ctx, "/management.PostgreSQL/AddPostgreSQL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PostgreSQLServer is the server API for PostgreSQL service.
type PostgreSQLServer interface {
	// AddPostgreSQL adds PostgreSQL Service and starts postgres exporter.
	// It automatically adds a service to inventory, which is running on provided "node_id",
	// then adds "postgres_exporter" with provided "pmm_agent_id" and other parameters.
	AddPostgreSQL(context.Context, *AddPostgreSQLRequest) (*AddPostgreSQLResponse, error)
}

func RegisterPostgreSQLServer(s *grpc.Server, srv PostgreSQLServer) {
	s.RegisterService(&_PostgreSQL_serviceDesc, srv)
}

func _PostgreSQL_AddPostgreSQL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPostgreSQLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostgreSQLServer).AddPostgreSQL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/management.PostgreSQL/AddPostgreSQL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostgreSQLServer).AddPostgreSQL(ctx, req.(*AddPostgreSQLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PostgreSQL_serviceDesc = grpc.ServiceDesc{
	ServiceName: "management.PostgreSQL",
	HandlerType: (*PostgreSQLServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddPostgreSQL",
			Handler:    _PostgreSQL_AddPostgreSQL_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "managementpb/postgresql.proto",
}
